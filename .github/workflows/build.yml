name: Nightly Build

on:
  push: # Run CI on the main branch after every merge. This is important to fill the GitHub Actions cache in a way that pull requests can see it
    branches:
      - main

jobs:
  build:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - uses: actions/checkout@v2
        with:
          repository: aviinl/leptos
          path: ../leptos

      - uses: actions/checkout@v2
        with:
          repository: aviinl/leptos-use
          path: ../leptos-use

      - name: Set up Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly

      - name: Install Node.js and npm
        uses: actions/setup-node@v2
        with:
          node-version: '18.x'

      - name: Install dependencies
        run: |
          cargo install cargo-leptos
          cargo install sqlx-cli --no-default-features --features sqlite
          cd crates/dashboard
          npm install
          cd $env:GITHUB_WORKSPACE

      - name: Build CSS with TailwindCSS
        run: |
          cd $env:GITHUB_WORKSPACE/crates/dashboard
          npx --yes tailwindcss -i ./style/input.css -o ./style/output.scss --watch

      - name: Create empty database file
        run: touch db.sqlite

      - name: Run database migrations
        run: |
          cd $env:GITHUB_WORKSPACE/crates/web
          sqlx migrate run --database-url=sqlite:../../db.sqlite

      - name: Copy .env.example to .env
        run: cp .env.example .env

      - name: Build
        run: cargo leptos build --release

      - name: Collect artifacts
        run: |
          # make a directory for the release
          mkdir $env:GITHUB_WORKSPACE/release
          # copy the binary from target/server/release/*.exe to release/
          cp $env:GITHUB_WORKSPACE/target/server/release/*.exe $env:GITHUB_WORKSPACE/release
          # copy the database from db.sqlite to release/
          cp $env:GITHUB_WORKSPACE/db.sqlite $env:GITHUB_WORKSPACE/release
          # copy the .env file to release/
          cp $env:GITHUB_WORKSPACE/.env $env:GITHUB_WORKSPACE/release
          # create a "site" folder for the dashboard
          # copy the folder /target/site to release/site
          mkdir $env:GITHUB_WORKSPACE/release/site
          cp -r $env:GITHUB_WORKSPACE/target/site/* $env:GITHUB_WORKSPACE/release/site
          # copy winpty.dll from lib to release
          cp $env:GITHUB_WORKSPACE/lib/winpty.dll $env:GITHUB_WORKSPACE/release
          # zip the release folder
          cd $env:GITHUB_WORKSPACE/release
          zip -r ../release.zip .
          cd $env:GITHUB_WORKSPACE
          # delete the release folder
          rm -rf $env:GITHUB_WORKSPACE/release
        if: success()

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: release
          path: release.zip