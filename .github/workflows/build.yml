name: Nightly Build

on:
  push: # Run CI on the main branch after every merge. This is important to fill the GitHub Actions cache in a way that pull requests can see it
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Test things
        run: |
          echo Without $GITHUB_WORKSPACE
          echo With $env:GITHUB_WORKSPACE

      # - name: Checkout code
      #   uses: actions/checkout@v2

      # - name: Set up Rust toolchain
      #   uses: actions-rs/toolchain@v1
      #   with:
      #     toolchain: nightly

      # - name: Install Node.js and npm
      #   uses: actions/setup-node@v2
      #   with:
      #     node-version: '18.x'

      # - name: Install dependencies
      #   run: |
      #     cargo install cargo-leptos
      #     cargo install sqlx-cli --no-default-features --features sqlite
      #     cd crates/dashboard
      #     npm install
      #     cd $GITHUB_WORKSPACE

      # - name: Build CSS with TailwindCSS
      #   run: |
      #     cd $GITHUB_WORKSPACE/crates/dashboard
      #     npx --yes tailwindcss -i ./style/input.css -o ./style/output.scss --watch

      # - name: Create empty database file
      #   run: touch db.sqlite

      # - name: Run database migrations
      #   run: |
      #     cd $GITHUB_WORKSPACE/crates/web
      #     sqlx migrate run --database-url=sqlite:../../db.sqlite

      # - name: Copy .env.example to .env
      #   run: cp .env.example .env

      # - name: Build
      #   run: cargo leptos build --release

      # - name: Collect artifacts
      #   run: |
      #     # make a directory for the release
      #     mkdir $GITHUB_WORKSPACE/release
      #     # copy the binary from target/server/release/*.exe to release/
      #     cp $GITHUB_WORKSPACE/target/server/release/*.exe $GITHUB_WORKSPACE/release
      #     # copy the database from db.sqlite to release/
      #     cp $GITHUB_WORKSPACE/db.sqlite $GITHUB_WORKSPACE/release
      #     # copy the .env file to release/
      #     cp $GITHUB_WORKSPACE/.env $GITHUB_WORKSPACE/release
      #     # create a "site" folder for the dashboard
      #     # copy the folder /target/site to release/site
      #     mkdir $GITHUB_WORKSPACE/release/site
      #     cp -r $GITHUB_WORKSPACE/target/site/* $GITHUB_WORKSPACE/release/site
      #     # copy winpty.dll from lib to release
      #     cp $GITHUB_WORKSPACE/lib/winpty.dll $GITHUB_WORKSPACE/release
      #     # zip the release folder
      #     cd $GITHUB_WORKSPACE/release
      #     zip -r ../release.zip .
      #     cd $GITHUB_WORKSPACE
      #     # delete the release folder
      #     rm -rf $GITHUB_WORKSPACE/release
      #   if: success()

      # - name: Upload artifacts
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: release
      #     path: release.zip